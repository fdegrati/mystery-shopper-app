<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Panel Admin - Mystery Shopper</title>
  <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <style>
    .tab-content { display: none; }
    .tab-content.active { display: block; }
    .modal { display: none; position: fixed; z-index: 50; left: 0; top: 0; width: 100%; height: 100%; background-color: rgba(0,0,0,0.5); }
    .modal.active { display: flex; align-items: center; justify-content: center; }
  </style>
</head>
<body class="bg-gray-50">
  <header class="bg-gradient-to-r from-indigo-600 to-purple-600 text-white shadow-lg">
    <div class="container mx-auto px-4 py-6">
      <div class="flex justify-between items-center">
        <div>
          <h1 class="text-3xl font-bold">Mystery Shopper</h1>
          <p class="text-indigo-100 mt-1">Panel de Administración</p>
        </div>
        <div class="flex items-center space-x-4">
          <% if (isAdmin) { %>
            <span class="bg-green-500 text-white px-3 py-1 rounded-full text-sm">✓ Verificado</span>
          <% } %>
        </div>
      </div>
    </div>
  </header>

  <div class="container mx-auto px-4 py-8">
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
      <div class="bg-white rounded-lg shadow-md p-6">
        <div class="flex items-center justify-between">
          <div>
            <p class="text-gray-500 text-sm font-medium">Encuestas</p>
            <p class="text-3xl font-bold text-indigo-600 mt-2"><%= stats.totalEncuestas %></p>
          </div>
          <div class="bg-indigo-100 rounded-full p-4">
            <i class="fas fa-clipboard-list text-2xl text-indigo-600"></i>
          </div>
        </div>
      </div>

      <div class="bg-white rounded-lg shadow-md p-6">
        <div class="flex items-center justify-between">
          <div>
            <p class="text-gray-500 text-sm font-medium">Formularios</p>
            <p class="text-3xl font-bold text-purple-600 mt-2"><%= stats.totalFormularios %></p>
          </div>
          <div class="bg-purple-100 rounded-full p-4">
            <i class="fas fa-file-alt text-2xl text-purple-600"></i>
          </div>
        </div>
      </div>

      <div class="bg-white rounded-lg shadow-md p-6">
        <div class="flex items-center justify-between">
          <div>
            <p class="text-gray-500 text-sm font-medium">Clientes</p>
            <p class="text-3xl font-bold text-green-600 mt-2"><%= stats.totalClientes %></p>
          </div>
          <div class="bg-green-100 rounded-full p-4">
            <i class="fas fa-users text-2xl text-green-600"></i>
          </div>
        </div>
      </div>

      <div class="bg-white rounded-lg shadow-md p-6">
        <div class="flex items-center justify-between">
          <div>
            <p class="text-gray-500 text-sm font-medium">Asignaciones</p>
            <p class="text-3xl font-bold text-orange-600 mt-2"><%= stats.totalAsignaciones %></p>
          </div>
          <div class="bg-orange-100 rounded-full p-4">
            <i class="fas fa-tasks text-2xl text-orange-600"></i>
          </div>
        </div>
      </div>
    </div>

    <div class="bg-white rounded-lg shadow-md mb-8">
      <div class="border-b border-gray-200">
        <nav class="flex flex-wrap -mb-px">
          <button class="tab-btn px-6 py-4 text-sm font-medium border-b-2 border-indigo-600 text-indigo-600" data-tab="encuestas">
            <i class="fas fa-clipboard-list mr-2"></i> Encuestas
          </button>
          <button class="tab-btn px-6 py-4 text-sm font-medium border-b-2 border-transparent text-gray-500 hover:text-gray-700" data-tab="clientes">
            <i class="fas fa-users mr-2"></i> Clientes
          </button>
          <button class="tab-btn px-6 py-4 text-sm font-medium border-b-2 border-transparent text-gray-500 hover:text-gray-700" data-tab="asignaciones">
            <i class="fas fa-tasks mr-2"></i> Asignaciones
          </button>
        </nav>
      </div>

      <div id="tab-encuestas" class="tab-content active p-6">
        <div class="flex justify-between items-center mb-6">
          <h2 class="text-2xl font-bold text-gray-800">Encuestas y Formularios</h2>
          <button onclick="openModal('modalNuevaEncuesta')" class="bg-indigo-600 text-white px-4 py-2 rounded-lg hover:bg-indigo-700">
            <i class="fas fa-plus mr-2"></i> Nueva Encuesta
          </button>
        </div>

        <div class="space-y-4">
          <% encuestas.forEach(encuesta => { %>
            <div class="border border-gray-200 rounded-lg p-4 hover:shadow-md transition">
              <div class="flex justify-between items-start">
                <div class="flex-1">
                  <h3 class="text-lg font-semibold text-gray-800"><%= encuesta.nombre %></h3>
                  <p class="text-sm text-gray-600 mt-1"><%= encuesta.descripcion || 'Sin descripción' %></p>
                  <div class="flex items-center space-x-4 mt-3">
                    <span class="text-xs bg-blue-100 text-blue-800 px-2 py-1 rounded">
                      <i class="fas fa-tag mr-1"></i> <%= encuesta.rubro %>
                    </span>
                    <span class="text-xs text-gray-500">
                      <i class="fas fa-file-alt mr-1"></i> <%= encuesta.total_formularios %> formularios
                    </span>
                  </div>
                </div>
                <div class="flex space-x-2">
                  <button onclick="verFormularios(<%= encuesta.id %>)" class="text-indigo-600 hover:text-indigo-800 p-2" title="Ver formularios">
                    <i class="fas fa-eye"></i>
                  </button>
                </div>
              </div>
              
              <div id="formularios-<%= encuesta.id %>" class="mt-4 pl-4 border-l-2 border-indigo-200 hidden"></div>
            </div>
          <% }); %>
        </div>
      </div>

      <div id="tab-clientes" class="tab-content p-6">
        <div class="flex justify-between items-center mb-6">
          <h2 class="text-2xl font-bold text-gray-800">Clientes y Locales</h2>
          <button onclick="openModal('modalNuevoCliente')" class="bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700">
            <i class="fas fa-plus mr-2"></i> Nuevo Cliente
          </button>
        </div>

        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
          <% clientes.forEach(cliente => { %>
            <div class="bg-white border border-gray-200 rounded-lg p-5 hover:shadow-lg transition">
              <div class="flex items-start justify-between mb-3">
                <div class="flex-1">
                  <h3 class="font-bold text-lg text-gray-800"><%= cliente.nombre %></h3>
                  <p class="text-sm text-gray-600"><%= cliente.rubro %></p>
                </div>
              </div>
              <div class="space-y-2 text-sm">
                <p class="text-gray-600">
                  <i class="fas fa-envelope mr-2 text-gray-400"></i>
                  <%= cliente.email || 'Sin email' %>
                </p>
                <p class="text-gray-600">
                  <i class="fas fa-tasks mr-2 text-gray-400"></i>
                  <%= cliente.total_asignaciones %> asignaciones
                </p>
              </div>
            </div>
          <% }); %>
        </div>
      </div>

      <div id="tab-asignaciones" class="tab-content p-6">
        <div class="flex justify-between items-center mb-6">
          <h2 class="text-2xl font-bold text-gray-800">Gestión de Asignaciones</h2>
          <button onclick="openModal('modalNuevaAsignacion')" class="bg-orange-600 text-white px-4 py-2 rounded-lg hover:bg-orange-700">
            <i class="fas fa-plus mr-2"></i> Nueva Asignación
          </button>
        </div>
        
        <div class="mb-4 flex space-x-2">
          <button onclick="cargarAsignaciones()" class="bg-gray-600 text-white px-4 py-2 rounded-lg hover:bg-gray-700">
            <i class="fas fa-sync-alt mr-2"></i> Cargar Asignaciones
          </button>
        </div>

        <div id="listaAsignaciones" class="space-y-3">
          <p class="text-gray-500 text-center py-8">Haz clic en "Cargar Asignaciones" para ver la lista</p>
        </div>
      </div>
    </div>
  </div>

<!-- FIN PARTE 1 -->
<!-- Modales -->
  <div id="modalNuevaEncuesta" class="modal">
    <div class="bg-white rounded-lg p-6 w-full max-w-md">
      <h3 class="text-xl font-bold mb-4">Nueva Encuesta</h3>
      <form id="formNuevaEncuesta" onsubmit="crearEncuesta(event)">
        <div class="space-y-4">
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Nombre</label>
            <input type="text" name="nombre" required class="w-full border border-gray-300 rounded-lg px-3 py-2">
          </div>
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Rubro</label>
            <input type="text" name="rubro" required class="w-full border border-gray-300 rounded-lg px-3 py-2">
          </div>
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Descripción</label>
            <textarea name="descripcion" rows="3" class="w-full border border-gray-300 rounded-lg px-3 py-2"></textarea>
          </div>
          <% if (!isAdmin) { %>
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Código de Administrador</label>
            <input type="password" name="adminCode" class="w-full border border-gray-300 rounded-lg px-3 py-2">
          </div>
          <% } %>
        </div>
        <div class="flex justify-end space-x-2 mt-6">
          <button type="button" onclick="closeModal('modalNuevaEncuesta')" class="px-4 py-2 text-gray-600 hover:bg-gray-100 rounded-lg">Cancelar</button>
          <button type="submit" class="px-4 py-2 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700">Crear</button>
        </div>
      </form>
    </div>
  </div>

  <div id="modalNuevoCliente" class="modal">
    <div class="bg-white rounded-lg p-6 w-full max-w-md">
      <h3 class="text-xl font-bold mb-4">Nuevo Cliente</h3>
      <form id="formNuevoCliente" onsubmit="crearCliente(event)">
        <div class="space-y-4">
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Nombre</label>
            <input type="text" name="nombre" required class="w-full border border-gray-300 rounded-lg px-3 py-2">
          </div>
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Email</label>
            <input type="email" name="email" class="w-full border border-gray-300 rounded-lg px-3 py-2">
          </div>
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Rubro</label>
            <input type="text" name="rubro" required class="w-full border border-gray-300 rounded-lg px-3 py-2">
          </div>
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">URL del Logo</label>
            <input type="url" name="logoUrl" class="w-full border border-gray-300 rounded-lg px-3 py-2">
          </div>
          <% if (!isAdmin) { %>
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Código de Administrador</label>
            <input type="password" name="adminCode" class="w-full border border-gray-300 rounded-lg px-3 py-2">
          </div>
          <% } %>
        </div>
        <div class="flex justify-end space-x-2 mt-6">
          <button type="button" onclick="closeModal('modalNuevoCliente')" class="px-4 py-2 text-gray-600 hover:bg-gray-100 rounded-lg">Cancelar</button>
          <button type="submit" class="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700">Crear</button>
        </div>
      </form>
    </div>
  </div>

  <div id="modalNuevaAsignacion" class="modal">
    <div class="bg-white rounded-lg p-6 w-full max-w-md">
      <h3 class="text-xl font-bold mb-4">Nueva Asignación</h3>
      <form id="formNuevaAsignacion" onsubmit="crearAsignacion(event)">
        <div class="space-y-4">
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Formulario</label>
            <select name="formularioId" required class="w-full border border-gray-300 rounded-lg px-3 py-2" id="selectFormulario">
              <option value="">Cargando...</option>
            </select>
          </div>
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Cliente</label>
            <select name="clienteId" required class="w-full border border-gray-300 rounded-lg px-3 py-2">
              <option value="">Seleccionar...</option>
              <% clientes.forEach(c => { %>
                <option value="<%= c.id %>"><%= c.nombre %></option>
              <% }); %>
            </select>
          </div>
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Emails de Shoppers (uno por línea)</label>
            <textarea name="shopperEmails" rows="4" required placeholder="shopper1@example.com&#10;shopper2@example.com" class="w-full border border-gray-300 rounded-lg px-3 py-2"></textarea>
          </div>
          <% if (!isAdmin) { %>
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Código de Administrador</label>
            <input type="password" name="adminCode" class="w-full border border-gray-300 rounded-lg px-3 py-2">
          </div>
          <% } %>
        </div>
        <div class="flex justify-end space-x-2 mt-6">
          <button type="button" onclick="closeModal('modalNuevaAsignacion')" class="px-4 py-2 text-gray-600 hover:bg-gray-100 rounded-lg">Cancelar</button>
          <button type="submit" class="px-4 py-2 bg-orange-600 text-white rounded-lg hover:bg-orange-700">Crear</button>
        </div>
      </form>
    </div>
  </div>

  <script>
    const isAdmin = <%= isAdmin ? 'true' : 'false' %>;
    const baseUrl = '<%= baseUrl %>';

    document.querySelectorAll('.tab-btn').forEach(btn => {
      btn.addEventListener('click', () => {
        const tab = btn.dataset.tab;
        document.querySelectorAll('.tab-btn').forEach(b => {
          b.classList.remove('border-indigo-600', 'text-indigo-600');
          b.classList.add('border-transparent', 'text-gray-500');
        });
        btn.classList.remove('border-transparent', 'text-gray-500');
        btn.classList.add('border-indigo-600', 'text-indigo-600');
        
        document.querySelectorAll('.tab-content').forEach(content => {
          content.classList.remove('active');
        });
        document.getElementById('tab-' + tab).classList.add('active');
      });
    });

    function openModal(id) {
      document.getElementById(id).classList.add('active');
      if (id === 'modalNuevaAsignacion') {
        cargarFormulariosSelect();
      }
    }

    function closeModal(id) {
      document.getElementById(id).classList.remove('active');
    }

    async function crearEncuesta(e) {
      e.preventDefault();
      const form = e.target;
      const formData = new FormData(form);
      
      try {
        const response = await fetch('/admin/encuestas', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            nombre: formData.get('nombre'),
            rubro: formData.get('rubro'),
            descripcion: formData.get('descripcion'),
            adminCode: formData.get('adminCode')
          })
        });
        
        if (response.ok) {
          alert('Encuesta creada correctamente');
          location.reload();
        } else {
          const error = await response.json();
          alert(error.message || 'Error al crear encuesta');
        }
      } catch (error) {
        alert('Error: ' + error.message);
      }
    }

    async function crearCliente(e) {
      e.preventDefault();
      const form = e.target;
      const formData = new FormData(form);
      
      try {
        const response = await fetch('/admin/clientes', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            nombre: formData.get('nombre'),
            email: formData.get('email'),
            rubro: formData.get('rubro'),
            logoUrl: formData.get('logoUrl'),
            adminCode: formData.get('adminCode')
          })
        });
        
        if (response.ok) {
          alert('Cliente creado correctamente');
          location.reload();
        } else {
          const error = await response.json();
          alert(error.message || 'Error al crear cliente');
        }
      } catch (error) {
        alert('Error: ' + error.message);
      }
    }

    async function crearAsignacion(e) {
      e.preventDefault();
      const form = e.target;
      const formData = new FormData(form);
      const emails = formData.get('shopperEmails').split('\n').map(e => e.trim()).filter(e => e);
      
      try {
        const response = await fetch('/admin/asignaciones', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            formularioId: formData.get('formularioId'),
            clienteId: formData.get('clienteId'),
            localId: null,
            shopperEmails: emails,
            adminCode: formData.get('adminCode')
          })
        });
        
        if (response.ok) {
          const result = await response.json();
          alert(`${result.count} asignaciones creadas correctamente`);
          closeModal('modalNuevaAsignacion');
          cargarAsignaciones();
        } else {
          const error = await response.json();
          alert(error.message || 'Error al crear asignaciones');
        }
      } catch (error) {
        alert('Error: ' + error.message);
      }
    }

<!-- FIN PARTE 2 -->
async function cargarAsignaciones() {
      try {
        const response = await fetch('/admin/asignaciones');
        const asignaciones = await response.json();
        
        const container = document.getElementById('listaAsignaciones');
        if (asignaciones.length === 0) {
          container.innerHTML = '<p class="text-gray-500 text-center py-8">No hay asignaciones</p>';
          return;
        }
        
        container.innerHTML = asignaciones.map(a => `
          <div class="border border-gray-200 rounded-lg p-4 hover:shadow-md transition">
            <div class="flex justify-between items-start">
              <div class="flex-1">
                <div class="flex items-center space-x-2 mb-2">
                  <h4 class="font-semibold text-gray-800">${a.formulario_nombre}</h4>
                  <span class="text-xs px-2 py-1 rounded ${getEstadoClass(a.estado)}">${a.estado.replace(/_/g, ' ')}</span>
                </div>
                <p class="text-sm text-gray-600">Cliente: ${a.cliente_nombre}</p>
                <p class="text-sm text-gray-600">Shopper: ${a.shopper_email}</p>
                ${a.local_nombre ? `<p class="text-sm text-gray-600">Local: ${a.local_nombre}</p>` : ''}
                ${a.puntajeTotal !== null && a.puntajeTotal !== undefined ? `
                  <p class="text-sm font-semibold mt-2 text-indigo-600">Puntaje: ${Math.round(a.puntajeTotal)}/100</p>
                ` : ''}
              </div>
              <div class="flex flex-col space-y-2">
                <button onclick="copiarLink('${baseUrl}/s/${a.shopper_slug}')" class="text-xs bg-blue-100 text-blue-600 px-3 py-1 rounded hover:bg-blue-200 transition">
                  <i class="fas fa-link mr-1"></i> Link shopper
                </button>
                ${a.cliente_slug ? `
                  <button onclick="copiarLink('${baseUrl}/c/${a.cliente_slug}')" class="text-xs bg-purple-100 text-purple-600 px-3 py-1 rounded hover:bg-purple-200 transition">
                    <i class="fas fa-link mr-1"></i> Link cliente
                  </button>
                ` : ''}
                ${a.estado === 'ENVIADO' || a.estado === 'EN_REVISION' ? `
                  <button onclick="cambiarEstado(${a.id}, 'APROBADO')" class="text-xs bg-green-100 text-green-600 px-3 py-1 rounded hover:bg-green-200 transition">
                    <i class="fas fa-check mr-1"></i> Aprobar
                  </button>
                ` : ''}
                ${a.estado === 'APROBADO' ? `
                  <button onclick="compartirConCliente(${a.id})" class="text-xs bg-indigo-100 text-indigo-600 px-3 py-1 rounded hover:bg-indigo-200 transition">
                    <i class="fas fa-share mr-1"></i> Compartir
                  </button>
                ` : ''}
              </div>
            </div>
          </div>
        `).join('');
      } catch (error) {
        console.error('Error:', error);
        alert('Error al cargar asignaciones');
      }
    }

    function getEstadoClass(estado) {
      const classes = {
        'BORRADOR': 'bg-gray-200 text-gray-700',
        'ENVIADO': 'bg-blue-200 text-blue-700',
        'EN_REVISION': 'bg-yellow-200 text-yellow-700',
        'NECESITA_REVISION': 'bg-red-200 text-red-700',
        'APROBADO': 'bg-green-200 text-green-700',
        'LISTO_PARA_COMPARTIR': 'bg-indigo-200 text-indigo-700',
        'COMPARTIDO_CON_CLIENTE': 'bg-purple-200 text-purple-700'
      };
      return classes[estado] || 'bg-gray-200 text-gray-700';
    }

    function copiarLink(url) {
      navigator.clipboard.writeText(url).then(() => {
        alert('Link copiado al portapapeles');
      }).catch(err => {
        prompt('Copia este link:', url);
      });
    }

    async function verFormularios(encuestaId) {
  const container = document.getElementById(`formularios-${encuestaId}`);
  if (container.classList.contains('hidden')) {
    try {
      const response = await fetch(`/admin/formularios?encuestaId=${encuestaId}`);
      const formularios = await response.json();
      
      container.innerHTML = `
  <div class="mb-3">
    <button onclick="crearFormulario(${encuestaId})" class="bg-purple-600 text-white px-3 py-2 rounded text-sm hover:bg-purple-700">
      <i class="fas fa-plus mr-1"></i> Crear Formulario
    </button>
  </div>
` + formularios.map(f => `
  <div class="bg-gray-50 p-3 rounded mb-2">
    <div class="flex justify-between items-center">
      <div>
        <p class="font-medium text-gray-800">${f.nombre}</p>
        <p class="text-xs text-gray-600">Versión ${f.version} - ${f.activo ? 'Activo' : 'Inactivo'}</p>
        <button onclick="verModulos(${f.id})" class="text-xs text-indigo-600 hover:text-indigo-800 mt-2">
          <i class="fas fa-layer-group mr-1"></i> Ver Módulos
        </button>
        <div id="modulos-${f.id}" class="hidden"></div>
      </div>
    </div>
  </div>
`).join('');
      
      container.classList.remove('hidden');
    } catch (error) {
      console.error('Error:', error);
    }
  } else {
    container.classList.add('hidden');
  }
}

async function crearFormulario(encuestaId) {
  const nombre = prompt('Nombre del formulario:');
  if (!nombre) return;
  
  const descripcion = prompt('Descripción (opcional):') || '';
  const codigo = isAdmin ? null : prompt('Código de administrador:');
  
  try {
    const response = await fetch('/admin/formularios', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        encuestaId,
        nombre,
        descripcion,
        adminCode: codigo
      })
    });
    
    if (response.ok) {
      alert('Formulario creado correctamente');
      document.getElementById(`formularios-${encuestaId}`).classList.add('hidden');
      verFormularios(encuestaId);
    } else {
      const error = await response.json();
      alert(error.message || 'Error al crear formulario');
    }
  } catch (error) {
    alert('Error: ' + error.message);
  }
}
async function verModulos(formularioId) {
  const container = document.getElementById(`modulos-${formularioId}`);
  if (!container) {
    const formularioDiv = event.target.closest('.bg-gray-50');
    const modulosDiv = document.createElement('div');
    modulosDiv.id = `modulos-${formularioId}`;
    modulosDiv.className = 'mt-3 pl-4 border-l-2 border-purple-200';
    formularioDiv.appendChild(modulosDiv);
  }
  
  const modulosContainer = document.getElementById(`modulos-${formularioId}`);
  
  if (modulosContainer.classList.contains('hidden')) {
    try {
      const response = await fetch(`/admin/modulos?formularioId=${formularioId}`);
      const modulos = await response.json();
      
      modulosContainer.innerHTML = `
        <div class="mb-3">
          <button onclick="crearModulo(${formularioId})" class="bg-indigo-600 text-white px-3 py-2 rounded text-sm hover:bg-indigo-700">
            <i class="fas fa-plus mr-1"></i> Crear Módulo
          </button>
        </div>
      ` + modulos.map(m => `
        <div class="bg-white p-3 rounded mb-2 border">
          <p class="font-medium text-gray-800">${m.titulo}</p>
          <p class="text-xs text-gray-600">Peso: ${m.peso}%</p>
        </div>
      `).join('');
      
      modulosContainer.classList.remove('hidden');
    } catch (error) {
      console.error('Error:', error);
    }
  } else {
    modulosContainer.classList.toggle('hidden');
  }
}

async function crearModulo(formularioId) {
  const titulo = prompt('Título del módulo (ej: Atención al Cliente):');
  if (!titulo) return;
  
  const descripcion = prompt('Descripción (opcional):') || '';
  const peso = prompt('Peso del módulo (ej: 30 para 30%):');
  if (!peso) return;
  
  const codigo = isAdmin ? null : prompt('Código de administrador:');
  
  try {
    const response = await fetch('/admin/modulos', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        formularioId,
        titulo,
        descripcion,
        peso: parseFloat(peso),
        adminCode: codigo
      })
    });
    
    if (response.ok) {
      alert('Módulo creado correctamente');
      document.getElementById(`modulos-${formularioId}`).classList.add('hidden');
      verModulos(formularioId);
    } else {
      const error = await response.json();
      alert(error.message || 'Error al crear módulo');
    }
  } catch (error) {
    alert('Error: ' + error.message);
  }
}

    async function cargarFormulariosSelect() {
      try {
        const response = await fetch('/admin/formularios');
        const formularios = await response.json();
        const select = document.getElementById('selectFormulario');
        select.innerHTML = '<option value="">Seleccionar...</option>' +
          formularios.filter(f => f.activo).map(f => 
            `<option value="${f.id}">${f.nombre}</option>`
          ).join('');
      } catch (error) {
        console.error('Error:', error);
      }
    }

    async function cambiarEstado(asignacionId, nuevoEstado) {
      const codigo = isAdmin ? null : prompt('Código de administrador:');
      if (!isAdmin && !codigo) return;
      
      try {
        const response = await fetch(`/admin/asignaciones/${asignacionId}/estado`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ nuevoEstado, adminCode: codigo })
        });
        
        if (response.ok) {
          alert('Estado actualizado');
          cargarAsignaciones();
        } else {
          const error = await response.json();
          alert(error.message || 'Error al cambiar estado');
        }
      } catch (error) {
        alert('Error: ' + error.message);
      }
    }

    async function compartirConCliente(asignacionId) {
      const codigo = isAdmin ? null : prompt('Código de administrador:');
      if (!isAdmin && !codigo) return;
      
      if (!confirm('¿Compartir esta evaluación con el cliente?')) return;
      
      try {
        const response = await fetch(`/admin/asignaciones/grupo/${asignacionId}/compartir-cliente`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ adminCode: codigo })
        });
        
        if (response.ok) {
          const result = await response.json();
          alert(`Compartido con cliente!\n\nLink:\n${result.url}`);
          cargarAsignaciones();
        } else {
          const error = await response.json();
          alert(error.message || 'Error al compartir');
        }
      } catch (error) {
        alert('Error: ' + error.message);
      }
    }
  </script>
</body>
</html>
